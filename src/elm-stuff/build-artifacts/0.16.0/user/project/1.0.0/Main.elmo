Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var flaaffy = Elm.Native.Port.make(_elm).inboundSignal("flaaffy",
   "Main.InitialData",
   function (v) {
      return typeof v === "object" && "peaks" in v && "start" in v && "bpm" in v ? {_: {}
                                                                                   ,peaks: typeof v.peaks === "object" && v.peaks instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.peaks.map(function (v) {
                                                                                      return typeof v === "number" ? v : _U.badPort("a number",v);
                                                                                   })) : _U.badPort("an array",v.peaks)
                                                                                   ,start: typeof v.start === "number" ? v.start : _U.badPort("a number",
                                                                                   v.start)
                                                                                   ,bpm: typeof v.bpm === "number" ? v.bpm : _U.badPort("a number",
                                                                                   v.bpm)} : _U.badPort("an object with fields `peaks`, `start`, `bpm`",
      v);
   });
   var ampharos = Elm.Native.Port.make(_elm).inboundSignal("ampharos",
   "Main.RealTimeData",
   function (v) {
      return typeof v === "object" && "amplitude" in v && "bass_energy" in v && "low_energy" in v && "mid_energy" in v && "high_energy" in v && "treble_energy" in v ? {_: {}
                                                                                                                                                                       ,amplitude: typeof v.amplitude === "number" ? v.amplitude : _U.badPort("a number",
                                                                                                                                                                       v.amplitude)
                                                                                                                                                                       ,bass_energy: typeof v.bass_energy === "number" ? v.bass_energy : _U.badPort("a number",
                                                                                                                                                                       v.bass_energy)
                                                                                                                                                                       ,low_energy: typeof v.low_energy === "number" ? v.low_energy : _U.badPort("a number",
                                                                                                                                                                       v.low_energy)
                                                                                                                                                                       ,mid_energy: typeof v.mid_energy === "number" ? v.mid_energy : _U.badPort("a number",
                                                                                                                                                                       v.mid_energy)
                                                                                                                                                                       ,high_energy: typeof v.high_energy === "number" ? v.high_energy : _U.badPort("a number",
                                                                                                                                                                       v.high_energy)
                                                                                                                                                                       ,treble_energy: typeof v.treble_energy === "number" ? v.treble_energy : _U.badPort("a number",
                                                                                                                                                                       v.treble_energy)} : _U.badPort("an object with fields `amplitude`, `bass_energy`, `low_energy`, `mid_energy`, `high_energy`, `treble_energy`",
      v);
   });
   var silentMusic = {amplitude: 0.0
                     ,bass_energy: 0.0
                     ,low_energy: 0.0
                     ,mid_energy: 0.0
                     ,high_energy: 0.0
                     ,treble_energy: 0.0};
   var drawImage = F2(function (url,r) {
      return $Graphics$Collage.toForm(A3($Graphics$Element.image,
      r,
      r,
      url));
   });
   var drawCircle = F2(function (color,r) {
      return A2($Graphics$Collage.filled,
      color,
      $Graphics$Collage.circle(r));
   });
   var drawBackground = F2(function (w,rt) {
      return _U.list([A2($Graphics$Collage.moveX,
                     $Basics.toFloat(-1 * (w / 3 | 0)),
                     A2(drawCircle,A4($Color.rgba,0,52,48,5.0e-2),rt.bass_energy))
                     ,A2($Graphics$Collage.moveX,
                     $Basics.toFloat(-1 * (w / 6 | 0)),
                     A2(drawCircle,A4($Color.rgba,13,78,73,5.0e-2),rt.low_energy))
                     ,A2($Graphics$Collage.moveX,
                     0.0,
                     A2(drawCircle,A4($Color.rgba,35,104,99,5.0e-2),rt.mid_energy))
                     ,A2($Graphics$Collage.moveX,
                     $Basics.toFloat(w / 6 | 0),
                     A2(drawCircle,A4($Color.rgba,65,131,126,5.0e-2),rt.high_energy))
                     ,A2($Graphics$Collage.moveX,
                     $Basics.toFloat(w / 3 | 0),
                     A2(drawCircle,
                     A4($Color.rgba,105,157,153,5.0e-2),
                     rt.treble_energy))]);
   });
   var clock = $Time.every($Time.millisecond);
   var linePosition = function (_p0) {
      var _p1 = _p0;
      var _p3 = _p1._0;
      var _p2 = _p1._1;
      return A2($Graphics$Collage.traced,
      _U.update($Graphics$Collage.defaultLine,{width: 12}),
      $Graphics$Collage.path(_U.list([{ctor: "_Tuple2"
                                      ,_0: 0 - _p3
                                      ,_1: _p2}
                                     ,{ctor: "_Tuple2",_0: _p3,_1: _p2}])));
   };
   var toPeakObjects = function (data) {
      var start = data.start;
      return A2($List.map,
      function (time) {
         return {songStart: start,timeDelta: time,clicked: false};
      },
      data.peaks);
   };
   var updatePeaks = F2(function (inputSig,peaks) {
      updatePeaks: while (true) {
         var _p4 = inputSig;
         if (_p4.ctor === "InitData") {
               return toPeakObjects(_p4._0);
            } else {
               var _p5 = peaks;
               if (_p5.ctor === "[]") {
                     return _U.list([]);
                  } else {
                     var _p7 = _p5._1;
                     var _p6 = _p5._0;
                     var timeDistance = _p6.songStart + _p6.timeDelta * 1000 - _p4._0._0;
                     if (_U.cmp(timeDistance,-300) < 0) {
                           var _v3 = inputSig,_v4 = _p7;
                           inputSig = _v3;
                           peaks = _v4;
                           continue updatePeaks;
                        } else if (_U.cmp(timeDistance,-175) > 0 && _U.cmp(timeDistance,
                        75) < 0) return _p4._0._1 ? A2($List._op["::"],
                           _U.update(_p6,{clicked: true}),
                           A2(updatePeaks,inputSig,_p7)) : peaks; else return peaks;
                  }
            }
      }
   });
   var missImage = "http://www.clker.com/cliparts/5/9/5/4/12456868161725760927raemi_Cross_Out.svg.med.png";
   var hitImage = "https://uxtraining.com/assets/UX2-f717a856d969481dceffd400d6cfaf2c.png";
   var offset = 2 / 1800;
   var update = F2(function (t,line) {
      return _U.eq(line.direction,
      0) ? _U.cmp(line.height - offset * t,-1) < 0 ? {direction: 1
                                                     ,height: -1.0 - (line.height - offset * t + 1)} : _U.update(line,
      {height: line.height - offset * t}) : _U.cmp(line.height + offset * t,
      1) > 0 ? {direction: 0
               ,height: 1.0 - (line.height + offset * t - 1)} : _U.update(line,
      {height: line.height + offset * t});
   });
   var drawPeak = F6(function (_p8,
   curTime,
   peak,
   timeDistance,
   line,
   r) {
      var _p9 = _p8;
      var _p11 = _p9._0;
      var _p10 = _p9._1;
      var futurePos = A2(update,timeDistance,line);
      var h2 = futurePos.height;
      var w2 = function () {
         var mod = A2($Basics._op["%"],
         $Basics.round(peak.timeDelta * 100),
         2 * _p11);
         return _U.cmp(mod,
         _p11) < 0 ? (_p11 / -2 | 0) + mod : (_p11 / 2 | 0) - A2($Basics._op["%"],
         mod,
         _p11);
      }();
      return peak.clicked ? A2($Graphics$Collage.move,
      {ctor: "_Tuple2"
      ,_0: $Basics.toFloat(w2)
      ,_1: h2 * $Basics.toFloat(_p10 / 2 | 0)},
      A2(drawImage,
      hitImage,
      $Basics.round(2 * r))) : _U.cmp(timeDistance,
      -175) < 0 ? A2($Graphics$Collage.move,
      {ctor: "_Tuple2"
      ,_0: $Basics.toFloat(w2)
      ,_1: h2 * $Basics.toFloat(_p10 / 2 | 0)},
      A2(drawImage,
      missImage,
      $Basics.round(2 * r))) : _U.eq(futurePos.direction,
      0) ? A2($Graphics$Collage.move,
      {ctor: "_Tuple2"
      ,_0: $Basics.toFloat(w2)
      ,_1: h2 * $Basics.toFloat(_p10 / 2 | 0)},
      A2(drawCircle,
      A4($Color.rgba,95,86,255,0.8),
      r)) : A2($Graphics$Collage.move,
      {ctor: "_Tuple2"
      ,_0: $Basics.toFloat(w2)
      ,_1: h2 * $Basics.toFloat(_p10 / 2 | 0)},
      A2(drawCircle,A4($Color.rgba,124,255,153,0.8),r));
   });
   var drawPeaks = F4(function (_p12,curTime,p,line) {
      drawPeaks: while (true) {
         var _p13 = _p12;
         var _p18 = _p13._0;
         var _p17 = _p13._1;
         var _p14 = p;
         if (_p14.ctor === "[]") {
               return _U.list([]);
            } else {
               var _p16 = _p14._1;
               var _p15 = _p14._0;
               var timeDistance = _p15.songStart + _p15.timeDelta * 1000 - curTime;
               if (_U.cmp(timeDistance,-300) < 0) {
                     var _v8 = {ctor: "_Tuple2",_0: _p18,_1: _p17},
                     _v9 = curTime,
                     _v10 = _p16,
                     _v11 = line;
                     _p12 = _v8;
                     curTime = _v9;
                     p = _v10;
                     line = _v11;
                     continue drawPeaks;
                  } else if (_U.cmp(timeDistance,700) > 0) return _U.list([]);
                  else {
                        var r = _U.cmp(timeDistance,
                        -200) < 0 ? 10 : _U.cmp(timeDistance,
                        -100) < 0 ? 25 : _U.cmp(timeDistance,
                        -50) < 0 ? 35 : _U.cmp(timeDistance,
                        0) < 0 ? 45 : _U.cmp(timeDistance,
                        300) < 0 ? 50 : _U.cmp(timeDistance,
                        350) < 0 ? 45 : _U.cmp(timeDistance,
                        400) < 0 ? 40 : _U.cmp(timeDistance,
                        450) < 0 ? 35 : _U.cmp(timeDistance,
                        500) < 0 ? 30 : _U.cmp(timeDistance,
                        550) < 0 ? 25 : _U.cmp(timeDistance,
                        600) < 0 ? 22 : _U.cmp(timeDistance,650) < 0 ? 20 : 10;
                        return A2($List._op["::"],
                        A6(drawPeak,
                        {ctor: "_Tuple2",_0: _p18,_1: _p17},
                        curTime,
                        _p15,
                        timeDistance,
                        line,
                        r),
                        A4(drawPeaks,
                        {ctor: "_Tuple2",_0: _p18,_1: _p17},
                        curTime,
                        _p16,
                        line));
                     }
            }
      }
   });
   var view = F4(function (_p20,rt,peaks,_p19) {
      var _p21 = _p20;
      var _p26 = _p21._0;
      var _p25 = _p21._1;
      var _p22 = _p19;
      var _p24 = _p22._1;
      var _p23 = {ctor: "_Tuple2",_0: _p26,_1: _p25 - 150};
      var w$ = _p23._0;
      var h$ = _p23._1;
      return A3($Graphics$Collage.collage,
      _p26,
      _p25 - 100,
      A2($List._op["::"],
      linePosition({ctor: "_Tuple2"
                   ,_0: $Basics.toFloat(_p26)
                   ,_1: _p24.height * $Basics.toFloat(h$ / 2 | 0)}),
      A2($List.append,
      A4(drawPeaks,
      {ctor: "_Tuple2",_0: w$,_1: h$},
      _p22._0,
      peaks,
      _p24),
      A2(drawBackground,_p26,rt))));
   });
   var PeakObject = F3(function (a,b,c) {
      return {songStart: a,timeDelta: b,clicked: c};
   });
   var LineObject = F2(function (a,b) {
      return {direction: a,height: b};
   });
   var InitialData = F3(function (a,b,c) {
      return {peaks: a,start: b,bpm: c};
   });
   var RealTimeData = F6(function (a,b,c,d,e,f) {
      return {amplitude: a
             ,bass_energy: b
             ,low_energy: c
             ,mid_energy: d
             ,high_energy: e
             ,treble_energy: f};
   });
   var TimeDelta = function (a) {
      return {ctor: "TimeDelta",_0: a};
   };
   var InitData = function (a) {
      return {ctor: "InitData",_0: a};
   };
   var initState = {direction: 0,height: 1};
   var main = A5($Signal.map4,
   view,
   $Window.dimensions,
   ampharos,
   A3($Signal.foldp,
   updatePeaks,
   _U.list([]),
   A2($Signal.merge,
   A2($Signal.map,InitData,flaaffy),
   A2($Signal.map,TimeDelta,$Time.timestamp($Keyboard.space)))),
   $Time.timestamp(A3($Signal.foldp,
   update,
   initState,
   $Time.fps(30))));
   return _elm.Main.values = {_op: _op
                             ,initState: initState
                             ,InitData: InitData
                             ,TimeDelta: TimeDelta
                             ,RealTimeData: RealTimeData
                             ,InitialData: InitialData
                             ,LineObject: LineObject
                             ,PeakObject: PeakObject
                             ,offset: offset
                             ,hitImage: hitImage
                             ,missImage: missImage
                             ,update: update
                             ,toPeakObjects: toPeakObjects
                             ,updatePeaks: updatePeaks
                             ,linePosition: linePosition
                             ,clock: clock
                             ,drawCircle: drawCircle
                             ,drawImage: drawImage
                             ,drawBackground: drawBackground
                             ,drawPeak: drawPeak
                             ,drawPeaks: drawPeaks
                             ,view: view
                             ,silentMusic: silentMusic
                             ,main: main};
};