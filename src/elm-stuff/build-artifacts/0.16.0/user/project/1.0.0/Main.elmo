Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var flaaffy = Elm.Native.Port.make(_elm).inboundSignal("flaaffy",
   "Main.InitialData",
   function (v) {
      return typeof v === "object" && "peaks" in v && "start" in v && "bpm" in v ? {_: {}
                                                                                   ,peaks: typeof v.peaks === "object" && v.peaks instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.peaks.map(function (v) {
                                                                                      return typeof v === "number" ? v : _U.badPort("a number",v);
                                                                                   })) : _U.badPort("an array",v.peaks)
                                                                                   ,start: typeof v.start === "number" ? v.start : _U.badPort("a number",
                                                                                   v.start)
                                                                                   ,bpm: typeof v.bpm === "number" && isFinite(v.bpm) && Math.floor(v.bpm) === v.bpm ? v.bpm : _U.badPort("an integer",
                                                                                   v.bpm)} : _U.badPort("an object with fields `peaks`, `start`, `bpm`",
      v);
   });
   var ampharos = Elm.Native.Port.make(_elm).inboundSignal("ampharos",
   "Main.RealTimeData",
   function (v) {
      return typeof v === "object" && "amplitude" in v && "bass_energy" in v && "low_energy" in v && "mid_energy" in v && "high_energy" in v && "treble_energy" in v ? {_: {}
                                                                                                                                                                       ,amplitude: typeof v.amplitude === "number" ? v.amplitude : _U.badPort("a number",
                                                                                                                                                                       v.amplitude)
                                                                                                                                                                       ,bass_energy: typeof v.bass_energy === "number" ? v.bass_energy : _U.badPort("a number",
                                                                                                                                                                       v.bass_energy)
                                                                                                                                                                       ,low_energy: typeof v.low_energy === "number" ? v.low_energy : _U.badPort("a number",
                                                                                                                                                                       v.low_energy)
                                                                                                                                                                       ,mid_energy: typeof v.mid_energy === "number" ? v.mid_energy : _U.badPort("a number",
                                                                                                                                                                       v.mid_energy)
                                                                                                                                                                       ,high_energy: typeof v.high_energy === "number" ? v.high_energy : _U.badPort("a number",
                                                                                                                                                                       v.high_energy)
                                                                                                                                                                       ,treble_energy: typeof v.treble_energy === "number" ? v.treble_energy : _U.badPort("a number",
                                                                                                                                                                       v.treble_energy)} : _U.badPort("an object with fields `amplitude`, `bass_energy`, `low_energy`, `mid_energy`, `high_energy`, `treble_energy`",
      v);
   });
   var silentMusic = {amplitude: 0.0
                     ,bass_energy: 0.0
                     ,low_energy: 0.0
                     ,mid_energy: 0.0
                     ,high_energy: 0.0
                     ,treble_energy: 0.0};
   var drawScore = F3(function (_p0,hits,misses) {
      var _p1 = _p0;
      return A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: _p1._0 / 2 - 100,_1: _p1._1 / 2 - 100},
      $Graphics$Collage.text(A2($Text.typeface,
      _U.list(["avant garde","arial"]),
      A2($Text.height,
      30,
      A2($Text.color,
      A4($Color.rgba,138,0,94,0.5),
      $Text.fromString(A2($Basics._op["++"],
      $Basics.toString(hits),
      A2($Basics._op["++"],
      " / ",
      $Basics.toString(hits + misses)))))))));
   });
   var drawImage = F2(function (url,r) {
      return $Graphics$Collage.toForm(A3($Graphics$Element.image,
      r,
      r,
      url));
   });
   var drawCircle = F2(function (color,r) {
      return A2($Graphics$Collage.filled,
      color,
      $Graphics$Collage.circle(r));
   });
   var drawBackground = F2(function (w,rt) {
      return _U.list([A2($Graphics$Collage.moveX,
                     $Basics.toFloat(-1 * (w / 3 | 0)),
                     A2(drawCircle,A4($Color.rgba,0,52,48,5.0e-2),rt.bass_energy))
                     ,A2($Graphics$Collage.moveX,
                     $Basics.toFloat(-1 * (w / 6 | 0)),
                     A2(drawCircle,A4($Color.rgba,13,78,73,5.0e-2),rt.low_energy))
                     ,A2($Graphics$Collage.moveX,
                     0.0,
                     A2(drawCircle,A4($Color.rgba,35,104,99,5.0e-2),rt.mid_energy))
                     ,A2($Graphics$Collage.moveX,
                     $Basics.toFloat(w / 6 | 0),
                     A2(drawCircle,A4($Color.rgba,65,131,126,5.0e-2),rt.high_energy))
                     ,A2($Graphics$Collage.moveX,
                     $Basics.toFloat(w / 3 | 0),
                     A2(drawCircle,
                     A4($Color.rgba,105,157,153,5.0e-2),
                     rt.treble_energy))]);
   });
   var linePosition = function (_p2) {
      var _p3 = _p2;
      var _p5 = _p3._0;
      var _p4 = _p3._1;
      return A2($Graphics$Collage.traced,
      _U.update($Graphics$Collage.defaultLine,{width: 12}),
      $Graphics$Collage.path(_U.list([{ctor: "_Tuple2"
                                      ,_0: 0 - _p5
                                      ,_1: _p4}
                                     ,{ctor: "_Tuple2",_0: _p5,_1: _p4}])));
   };
   var updateScore = F2(function (current,_p6) {
      updateScore: while (true) {
         var _p7 = _p6;
         var _p16 = _p7._5;
         var _p15 = _p7._0;
         var _p14 = _p7._2;
         var _p13 = _p7._3;
         var _p12 = _p7._1;
         var _p11 = _p7._4;
         var _p8 = _p15;
         if (_p8.ctor === "[]") {
               return {ctor: "_Tuple3",_0: _U.list([]),_1: _p12,_2: _p14};
            } else {
               var _p10 = _p8._1;
               var _p9 = _p8._0;
               var timeDistance = _p16 + _p9.timeDelta * 1000 - current;
               if (_U.cmp(timeDistance,-300) < 0) if (_p9.clicked) {
                        var _v4 = current,
                        _v5 = {ctor: "_Tuple6"
                              ,_0: _p10
                              ,_1: _p12 + 1
                              ,_2: _p14
                              ,_3: _p13
                              ,_4: _p11
                              ,_5: _p16};
                        current = _v4;
                        _p6 = _v5;
                        continue updateScore;
                     } else {
                        var _v6 = current,
                        _v7 = {ctor: "_Tuple6"
                              ,_0: _p10
                              ,_1: _p12
                              ,_2: _p14 + 1
                              ,_3: _p13
                              ,_4: _p11
                              ,_5: _p16};
                        current = _v6;
                        _p6 = _v7;
                        continue updateScore;
                     } else return {ctor: "_Tuple3",_0: _p15,_1: _p12,_2: _p14};
            }
      }
   });
   var clickPeaks = F4(function (current,start,b,peaks) {
      var _p17 = peaks;
      if (_p17.ctor === "[]") {
            return _U.list([]);
         } else {
            var _p19 = _p17._1;
            var _p18 = _p17._0;
            var timeDistance = start + _p18.timeDelta * 1000 - current;
            return _U.cmp(timeDistance,-175) > 0 && _U.cmp(timeDistance,
            75) < 0 ? b ? A2($List._op["::"],
            _U.update(_p18,{clicked: true}),
            A4(clickPeaks,current,start,b,_p19)) : A2($List._op["::"],
            _p18,
            A4(clickPeaks,current,start,b,_p19)) : peaks;
         }
   });
   var toPeakObjects = function (data) {
      return A2($List.map,
      function (time) {
         return {timeDelta: time,clicked: false};
      },
      data.peaks);
   };
   var missImage = "http://www.clker.com/cliparts/5/9/5/4/12456868161725760927raemi_Cross_Out.svg.med.png";
   var hitImage = "https://uxtraining.com/assets/UX2-f717a856d969481dceffd400d6cfaf2c.png";
   var offset = 2 / 1800;
   var updateLine = F2(function (t,line) {
      return _U.eq(line.direction,
      0) ? _U.cmp(line.height - offset * t,-1) < 0 ? {direction: 1
                                                     ,height: -1.0 - (line.height - offset * t + 1)} : _U.update(line,
      {height: line.height - offset * t}) : _U.cmp(line.height + offset * t,
      1) > 0 ? {direction: 0
               ,height: 1.0 - (line.height + offset * t - 1)} : _U.update(line,
      {height: line.height + offset * t});
   });
   var update = F2(function (inputSig,_p20) {
      var _p21 = _p20;
      var _p30 = _p21._5;
      var _p29 = _p21._0;
      var _p28 = _p21._2;
      var _p27 = _p21._3;
      var _p26 = _p21._1;
      var _p25 = _p21._4;
      var _p22 = inputSig;
      switch (_p22.ctor)
      {case "InitData": var _p23 = _p22._0;
           return {ctor: "_Tuple6"
                  ,_0: toPeakObjects(_p23)
                  ,_1: 0
                  ,_2: 0
                  ,_3: _p27
                  ,_4: _p23.bpm
                  ,_5: _p23.start};
         case "Click": return {ctor: "_Tuple6"
                              ,_0: A4(clickPeaks,_p22._0._0,_p30,_p22._0._1,_p29)
                              ,_1: _p26
                              ,_2: _p28
                              ,_3: _p27
                              ,_4: _p25
                              ,_5: _p30};
         default: var line$ = A2(updateLine,_p22._0._1,_p27);
           var _p24 = A2(updateScore,
           _p22._0._0,
           {ctor: "_Tuple6"
           ,_0: _p29
           ,_1: _p26
           ,_2: _p28
           ,_3: _p27
           ,_4: _p25
           ,_5: _p30});
           var ps$ = _p24._0;
           var hits$ = _p24._1;
           var misses$ = _p24._2;
           return {ctor: "_Tuple6"
                  ,_0: ps$
                  ,_1: hits$
                  ,_2: misses$
                  ,_3: line$
                  ,_4: _p25
                  ,_5: _p30};}
   });
   var drawPeak = F5(function (_p31,peak,line,timeDistance,r) {
      var _p32 = _p31;
      var _p33 = _p32._1;
      var futurePos = A2(updateLine,timeDistance,line);
      var h2 = futurePos.height;
      var w$ = _p32._0 - 100;
      var w2 = function () {
         var mod = A2($Basics._op["%"],
         $Basics.round(peak.timeDelta * 100),
         2 * w$);
         return _U.cmp(mod,
         w$) < 0 ? (w$ / -2 | 0) + mod : (w$ / 2 | 0) - A2($Basics._op["%"],
         mod,
         w$);
      }();
      return peak.clicked ? A2($Graphics$Collage.move,
      {ctor: "_Tuple2"
      ,_0: $Basics.toFloat(w2)
      ,_1: h2 * $Basics.toFloat(_p33 / 2 | 0)},
      A2(drawImage,
      hitImage,
      $Basics.round(2 * r))) : _U.cmp(timeDistance,
      -175) < 0 ? A2($Graphics$Collage.move,
      {ctor: "_Tuple2"
      ,_0: $Basics.toFloat(w2)
      ,_1: h2 * $Basics.toFloat(_p33 / 2 | 0)},
      A2(drawImage,
      missImage,
      $Basics.round(2 * r))) : _U.eq(futurePos.direction,
      0) ? A2($Graphics$Collage.move,
      {ctor: "_Tuple2"
      ,_0: $Basics.toFloat(w2)
      ,_1: h2 * $Basics.toFloat(_p33 / 2 | 0)},
      A2(drawCircle,
      A4($Color.rgba,95,86,255,0.8),
      r)) : A2($Graphics$Collage.move,
      {ctor: "_Tuple2"
      ,_0: $Basics.toFloat(w2)
      ,_1: h2 * $Basics.toFloat(_p33 / 2 | 0)},
      A2(drawCircle,A4($Color.rgba,124,255,153,0.8),r));
   });
   var drawPeaks = F3(function (_p35,current,_p34) {
      drawPeaks: while (true) {
         var _p36 = _p35;
         var _p47 = _p36._0;
         var _p46 = _p36._1;
         var _p37 = _p34;
         var _p45 = _p37._5;
         var _p44 = _p37._2;
         var _p43 = _p37._3;
         var _p42 = _p37._1;
         var _p41 = _p37._4;
         var _p38 = _p37._0;
         if (_p38.ctor === "[]") {
               return _U.list([]);
            } else {
               var _p40 = _p38._1;
               var _p39 = _p38._0;
               var timeDistance = _p45 + _p39.timeDelta * 1000 - current;
               if (_U.cmp(timeDistance,-300) < 0) {
                     var _v15 = {ctor: "_Tuple2",_0: _p47,_1: _p46},
                     _v16 = current,
                     _v17 = {ctor: "_Tuple6"
                            ,_0: _p40
                            ,_1: _p42
                            ,_2: _p44
                            ,_3: _p43
                            ,_4: _p41
                            ,_5: _p45};
                     _p35 = _v15;
                     current = _v16;
                     _p34 = _v17;
                     continue drawPeaks;
                  } else if (_U.cmp(timeDistance,700) > 0) return _U.list([]);
                  else {
                        var r = _U.cmp(timeDistance,
                        -200) < 0 ? 10 : _U.cmp(timeDistance,
                        -100) < 0 ? 25 : _U.cmp(timeDistance,
                        -50) < 0 ? 35 : _U.cmp(timeDistance,
                        0) < 0 ? 45 : _U.cmp(timeDistance,
                        300) < 0 ? 50 : _U.cmp(timeDistance,
                        350) < 0 ? 45 : _U.cmp(timeDistance,
                        400) < 0 ? 40 : _U.cmp(timeDistance,
                        450) < 0 ? 35 : _U.cmp(timeDistance,
                        500) < 0 ? 30 : _U.cmp(timeDistance,
                        550) < 0 ? 25 : _U.cmp(timeDistance,
                        600) < 0 ? 22 : _U.cmp(timeDistance,650) < 0 ? 20 : 10;
                        return A2($List._op["::"],
                        A5(drawPeak,
                        {ctor: "_Tuple2",_0: _p47,_1: _p46},
                        _p39,
                        _p43,
                        timeDistance,
                        r),
                        A3(drawPeaks,
                        {ctor: "_Tuple2",_0: _p47,_1: _p46},
                        current,
                        {ctor: "_Tuple6"
                        ,_0: _p40
                        ,_1: _p42
                        ,_2: _p44
                        ,_3: _p43
                        ,_4: _p41
                        ,_5: _p45}));
                     }
            }
      }
   });
   var view = F3(function (_p49,rt,_p48) {
      var _p50 = _p49;
      var _p57 = _p50._0;
      var _p56 = _p50._1;
      var _p51 = _p48;
      var _p55 = _p51._1._2;
      var _p54 = _p51._1._3;
      var _p53 = _p51._1._1;
      var _p52 = {ctor: "_Tuple2",_0: _p57,_1: _p56 - 150};
      var w$ = _p52._0;
      var h$ = _p52._1;
      return A3($Graphics$Collage.collage,
      _p57,
      _p56 - 100,
      A2($List._op["::"],
      linePosition({ctor: "_Tuple2"
                   ,_0: $Basics.toFloat(_p57)
                   ,_1: _p54.height * $Basics.toFloat(h$ / 2 | 0)}),
      A2($List._op["::"],
      A3(drawScore,
      {ctor: "_Tuple2"
      ,_0: $Basics.toFloat(_p57)
      ,_1: $Basics.toFloat(_p56)},
      _p53,
      _p55),
      A2($List.append,
      A3(drawPeaks,
      {ctor: "_Tuple2",_0: w$,_1: h$},
      _p51._0,
      {ctor: "_Tuple6"
      ,_0: _p51._1._0
      ,_1: _p53
      ,_2: _p55
      ,_3: _p54
      ,_4: _p51._1._4
      ,_5: _p51._1._5}),
      A2(drawBackground,_p57,rt)))));
   });
   var PeakObject = F2(function (a,b) {
      return {timeDelta: a,clicked: b};
   });
   var LineObject = F2(function (a,b) {
      return {direction: a,height: b};
   });
   var InitialData = F3(function (a,b,c) {
      return {peaks: a,start: b,bpm: c};
   });
   var RealTimeData = F6(function (a,b,c,d,e,f) {
      return {amplitude: a
             ,bass_energy: b
             ,low_energy: c
             ,mid_energy: d
             ,high_energy: e
             ,treble_energy: f};
   });
   var TimeUpdate = function (a) {
      return {ctor: "TimeUpdate",_0: a};
   };
   var Click = function (a) {    return {ctor: "Click",_0: a};};
   var InitData = function (a) {
      return {ctor: "InitData",_0: a};
   };
   var initState = {ctor: "_Tuple6"
                   ,_0: _U.list([])
                   ,_1: 0
                   ,_2: 0
                   ,_3: {direction: 0,height: 1}
                   ,_4: 0
                   ,_5: 0};
   var main = A4($Signal.map3,
   view,
   $Window.dimensions,
   ampharos,
   $Time.timestamp(A3($Signal.foldp,
   update,
   initState,
   $Signal.mergeMany(_U.list([A2($Signal.map,InitData,flaaffy)
                             ,A2($Signal.map,Click,$Time.timestamp($Keyboard.space))
                             ,A2($Signal.map,
                             TimeUpdate,
                             $Time.timestamp($Time.fps(30)))])))));
   return _elm.Main.values = {_op: _op
                             ,initState: initState
                             ,InitData: InitData
                             ,Click: Click
                             ,TimeUpdate: TimeUpdate
                             ,RealTimeData: RealTimeData
                             ,InitialData: InitialData
                             ,LineObject: LineObject
                             ,PeakObject: PeakObject
                             ,offset: offset
                             ,hitImage: hitImage
                             ,missImage: missImage
                             ,update: update
                             ,toPeakObjects: toPeakObjects
                             ,clickPeaks: clickPeaks
                             ,updateLine: updateLine
                             ,updateScore: updateScore
                             ,linePosition: linePosition
                             ,drawCircle: drawCircle
                             ,drawImage: drawImage
                             ,drawBackground: drawBackground
                             ,drawScore: drawScore
                             ,drawPeak: drawPeak
                             ,drawPeaks: drawPeaks
                             ,view: view
                             ,silentMusic: silentMusic
                             ,main: main};
};