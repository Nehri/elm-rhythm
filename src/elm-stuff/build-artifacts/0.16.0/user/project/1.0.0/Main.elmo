Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var flaaffy = Elm.Native.Port.make(_elm).inboundSignal("flaaffy",
   "Main.InitialData",
   function (v) {
      return typeof v === "object" && "peaks" in v && "start" in v ? {_: {}
                                                                     ,peaks: typeof v.peaks === "object" && v.peaks instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.peaks.map(function (v) {
                                                                        return typeof v === "number" ? v : _U.badPort("a number",v);
                                                                     })) : _U.badPort("an array",v.peaks)
                                                                     ,start: typeof v.start === "number" ? v.start : _U.badPort("a number",
                                                                     v.start)} : _U.badPort("an object with fields `peaks`, `start`",
      v);
   });
   var ampharos = Elm.Native.Port.make(_elm).inboundSignal("ampharos",
   "Main.RealTimeData",
   function (v) {
      return typeof v === "object" && "amplitude" in v && "bass_energy" in v && "low_energy" in v && "mid_energy" in v && "high_energy" in v && "treble_energy" in v ? {_: {}
                                                                                                                                                                       ,amplitude: typeof v.amplitude === "number" ? v.amplitude : _U.badPort("a number",
                                                                                                                                                                       v.amplitude)
                                                                                                                                                                       ,bass_energy: typeof v.bass_energy === "number" ? v.bass_energy : _U.badPort("a number",
                                                                                                                                                                       v.bass_energy)
                                                                                                                                                                       ,low_energy: typeof v.low_energy === "number" ? v.low_energy : _U.badPort("a number",
                                                                                                                                                                       v.low_energy)
                                                                                                                                                                       ,mid_energy: typeof v.mid_energy === "number" ? v.mid_energy : _U.badPort("a number",
                                                                                                                                                                       v.mid_energy)
                                                                                                                                                                       ,high_energy: typeof v.high_energy === "number" ? v.high_energy : _U.badPort("a number",
                                                                                                                                                                       v.high_energy)
                                                                                                                                                                       ,treble_energy: typeof v.treble_energy === "number" ? v.treble_energy : _U.badPort("a number",
                                                                                                                                                                       v.treble_energy)} : _U.badPort("an object with fields `amplitude`, `bass_energy`, `low_energy`, `mid_energy`, `high_energy`, `treble_energy`",
      v);
   });
   var silentMusic = {amplitude: 0.0
                     ,bass_energy: 0.0
                     ,low_energy: 0.0
                     ,mid_energy: 0.0
                     ,high_energy: 0.0
                     ,treble_energy: 0.0};
   var drawCircle = F2(function (color,r) {
      return A2($Graphics$Collage.filled,
      color,
      $Graphics$Collage.circle(r));
   });
   var clock = $Time.every($Time.millisecond);
   var linePosition = function (_p0) {
      var _p1 = _p0;
      var _p3 = _p1._0;
      var _p2 = _p1._1;
      return A2($Graphics$Collage.traced,
      $Graphics$Collage.defaultLine,
      $Graphics$Collage.path(_U.list([{ctor: "_Tuple2"
                                      ,_0: 0 - _p3
                                      ,_1: _p2}
                                     ,{ctor: "_Tuple2",_0: _p3,_1: _p2}])));
   };
   var view = F3(function (_p5,obj,_p4) {
      var _p6 = _p5;
      var _p9 = _p6._0;
      var _p8 = _p6._1;
      var _p7 = _p4;
      return A3($Graphics$Collage.collage,
      _p9,
      _p8,
      _U.list([linePosition({ctor: "_Tuple2"
                            ,_0: $Basics.toFloat(_p9)
                            ,_1: _p7._1.height * $Basics.toFloat(_p8 / 2 | 0)})
              ,A2($Graphics$Collage.moveX,
              $Basics.toFloat(-1 * (_p9 / 3 | 0)),
              A2(drawCircle,A4($Color.rgba,0,52,48,5.0e-2),obj.bass_energy))
              ,A2($Graphics$Collage.moveX,
              $Basics.toFloat(-1 * (_p9 / 6 | 0)),
              A2(drawCircle,A4($Color.rgba,13,78,73,5.0e-2),obj.low_energy))
              ,A2($Graphics$Collage.moveX,
              0.0,
              A2(drawCircle,A4($Color.rgba,35,104,99,5.0e-2),obj.mid_energy))
              ,A2($Graphics$Collage.moveX,
              $Basics.toFloat(_p9 / 6 | 0),
              A2(drawCircle,
              A4($Color.rgba,65,131,126,5.0e-2),
              obj.high_energy))
              ,A2($Graphics$Collage.moveX,
              $Basics.toFloat(_p9 / 3 | 0),
              A2(drawCircle,
              A4($Color.rgba,105,157,153,5.0e-2),
              obj.treble_energy))]));
   });
<<<<<<< HEAD
   var main = A3($Signal.map2,view,$Window.dimensions,ampharos);
   var clock = $Time.every($Time.millisecond);
   var offset = $Basics.round(60 / 70 / 1000);
=======
   var offset = 2 / 870;
   var update = F2(function (t,_p10) {
      var _p11 = _p10;
      var _p13 = _p11._1;
      var _p12 = _p11._0;
      return _U.eq(_p13.direction,
      0) ? _U.cmp(_p13.height - offset * t,-1) < 0 ? {ctor: "_Tuple2"
                                                     ,_0: _p12
                                                     ,_1: {direction: 1
                                                          ,height: -1.0 - (_p13.height - offset * t + 1)}} : {ctor: "_Tuple2"
                                                                                                             ,_0: _p12
                                                                                                             ,_1: _U.update(_p13,
                                                                                                             {height: _p13.height - offset * t})} : _U.cmp(_p13.height + offset * t,
      1) > 0 ? {ctor: "_Tuple2"
               ,_0: _p12
               ,_1: {direction: 0
                    ,height: 1.0 - (_p13.height + offset * t - 1)}} : {ctor: "_Tuple2"
                                                                      ,_0: _p12
                                                                      ,_1: _U.update(_p13,{height: _p13.height + offset * t})};
   });
>>>>>>> 02e237d028dddde209c5f02f66da361bcad638ed
   var LineObject = F2(function (a,b) {
      return {direction: a,height: b};
   });
   var InitialData = F2(function (a,b) {
      return {peaks: a,start: b};
   });
   var RealTimeData = F6(function (a,b,c,d,e,f) {
      return {amplitude: a
             ,bass_energy: b
             ,low_energy: c
             ,mid_energy: d
             ,high_energy: e
             ,treble_energy: f};
   });
<<<<<<< HEAD
   var initState = {ctor: "_Tuple3"
                   ,_0: {peaks: _U.list([]),start: 0}
                   ,_1: silentMusic
                   ,_2: {direction: 0,height: 1}};
=======
   var initState = {ctor: "_Tuple2"
                   ,_0: {peaks: _U.list([]),start: 0}
                   ,_1: {direction: 0,height: 1}};
   var main = A4($Signal.map3,
   view,
   $Window.dimensions,
   ampharos,
   A3($Signal.foldp,update,initState,$Time.fps(30)));
>>>>>>> 02e237d028dddde209c5f02f66da361bcad638ed
   return _elm.Main.values = {_op: _op
                             ,initState: initState
                             ,RealTimeData: RealTimeData
                             ,InitialData: InitialData
                             ,LineObject: LineObject
                             ,offset: offset
<<<<<<< HEAD
=======
                             ,update: update
                             ,linePosition: linePosition
>>>>>>> 02e237d028dddde209c5f02f66da361bcad638ed
                             ,clock: clock
                             ,drawCircle: drawCircle
                             ,view: view
                             ,silentMusic: silentMusic
                             ,main: main};
};