Accomplishments:

1) Ports
	We set up two ports in our code, both of which listen for information from js. 
	Initially, we began this project by using Native for interacting with js, but
	with the lack of documentation and the inability to keep a global state for callback
	functions that our library required, we decided to work with ports instead.
	The first port we made (named ampharos) sends real time amplitude and frequency data
	from js to elm. This data is used for our background visualization of the music.
	The second port only sends data at the beginning of each playback. We treat
	this data as if it were our initial state, as it contains info, such as bpm, that the
	program needs to start the game, but that only needs to be sent once.

2) Sound processing
	As Elm does not currently have libraries for sound processing, we had to use a js
	library named p5 to send sound data to Elm. We did not write this library, but we
	made bug fixes to it along the way as it is not a well-maintained library. Had we
	known this at the beginning, we may have chosen a different library to build our
	code off of, but overall using a separate library for sound processing likely saved
	us much time and many headaches, despite all the ones p5 caused.

	We initially wanted to do all of our sound processing in real time, but due to lag and
	the need to print dots before they actually occur in the music so that players can hit
	them with the beat, it became necessary to pre-process the peaks data and then send it all 
	to elm once the processing had finished. This is partially due to how we deal with p5's 
	inaccurate peak detection at the beginning of the sound file by doing both normal peak 
	detection and peak detection of a reversed version of the soundfile. While this is fairly 
	expensive, it happens just once and greatly increased the accuracy of our peak data.
	We still do amplitude and frequency analysis in real time, as they did not cause significant
	lag.

3) Timestamp management
	Since we switched to pre-processed data, and had to deal with significant lag, we needed
	to use timestamps on our data so that we could have events occur correctly relative to
	each other, and be able to recover if elm got out of sync with the music.
	The time stamps sent from p5 were in seconds relative to the start of song, but all other
	time stamps were in milliseconds of system time, so some conversion was necessary
	to handle timed events. Moreover, in order to prevent accumulating lag, we needed to use
	the fps signal (which has time deltas instead of system time) to update according to the
	time passed, which is frequently not in the intervals promised by Elm.

	Perhaps the most important use of timestamps occurs when we begin to output peaks (beats)
	on the screen before they must be hit by the player. To do this, we must have the data 
	beforehand, and so we use asynchronous processing to get the whole list of peaks at the
	beginning of song and iterate through it based on both time and the timestamps of 
	click inputs. To output the peaks ahead of time, we compare the start time of the song
	to the timedelta of the peak and draw the dot at the position the line will be in when
	the timedelta occurs.

4) Player input and Scoring
	The only player input we use is from the spacebar, but since we need to account for
	reaction time and lag, we have several buffered time zones to determine if a given input
	hits the next Peak, and if so if it is "Good" or "Perfect" so that we can assign points
	accordingly. Making these zone feel correct took quite a bit of experimentation, and
	unfortunately these values are likely system specific. If we were to continue
	this project, we would want to include a calibration test.
	We originally did not have any penalty for a player pressing the spacebar at an
	incorrect time, but since this encouraged spamming the space bar rather than actually
	focusing on the song, we introduced a slight penalty for such inputs. It is thus
	technically possible to get a negative score, but we made the penalty fairly small
	to prevent making player frustration caused by lag and inaccurate p5 data any worse.

5) Visual display
	Our display is made up of three parts:
	The background, which is made of 5 circles, is a visualization of the song's realtime
	data. From left to right, each circle represents a frequency band, with its radius
	representing the energy (amplitude over a frequency range) in that band. Thus the
	left circles pulse with the beat of the song, and the others grow and fade depending
	on the volume and instrumentation currently being used.
	The bar, which moves up and down with the tempo of the song allowing the player to know
	where in the song they are and when they are supposed to press the spacebar.
	Assuming that p5 correctly calculates the song's bpm (which it normally at least gets
	close with) the bar moves from one end to another every 4 beats.
	The peaks, which show up as circles. When the bar aligns with the y value of these peaks
	the player is supposed to press the space bar, but we also move the x positions of the
	peaks as a function of time so it seems that the song is moving throughout the whole 
	field of play. We use separate colors for peaks that are to be hit when the bar is
	moving upwards as opposed to downwards to prevent ambiguities as to when a peak is
	supposed to be hit. We also change the image of the peaks based on if the player
	hits them as "Good" or "Perfect" or misses the peak entirely to give the player
	visual feedback on if they are in sync with the game.


Our experience with Elm:
	While we would have liked to do sound processing in Elm, the lack of libraries,
	and Elms inability to handle very large data-sets without using tail-recursion
	made this impossible.

	We lost a great deal of time trying to work with with Native code, but in
	doing so learned more about how Elm works at the js level. While some
	of the code is quite elegant, much of it was quite sketchy. I was
	surprised that several List functions work by converting a List back
	to a js array, calling the js function on the array, and then converting
	the Array back to a List.

	Switching to Ports made the issues of Native go away, If we had not
	had help from Mitch setting up our ports we likely would have
	had much difficulty with them as well, since there is currently very little
	documentation on how to set them up. (Such as requiring initialization messages).

	The Elm compiler error messages are general very useful, in the cases when
	they aren't the small user base made finding help rather difficult. When
	our js code broke, one google search lead to a StackExchange answer that
	fixed the problem, but one unhelpful Elm error caused by a single typo
	causing an infinity recursive type alias took hours to debug.

	Before condensing our State and update functions, we had difficulties handling
	multiple signals causing different parts of our state to update but requiring
	data from other parts of the state. While condensing our state fixed this problem,
	it made it harder to make each part of our state modular, and whenever we changed
	one part of our state required us to change all other parts as well, which would
	not have been a problem in an imperative language.

	Elm's type system is very nice, and helped catch many errors. If we had
	made different types for time deltas vs. absolute time, we might even have
	caught a few logic errors at compile time.

	While we have found Maybes annoying in the past, they proved
	very useful when creating a Best score that may or may not exist, and 
	if our data set was not pre-computed, we might have found Elms ability
	to handle uncertainty with Maybes even more useful.

	Overall, Elm had many challenges due to it being such a new language,
	but its ability to handle signals reactively, and its stability
	relative to pure js were much appreciated.


Other Challenges:
	Many challenges were incurred by using the p5 library. One notable bug was that
	calling the reverseBuffer function would start playback even if the song
	had never been told to start, as the function falsely assumed the song was
	already playing when the function was called. Also, the tempo data that
	p5 calculated was never returned for some reason, but we changed that since we
	needed it to move our bar with the beat.

	Learning how to handle callbacks in js was also an unexpected challenge.
	In-fact this project probably had more difficulties with js than elm,
	which speaks quite a bit to elm's usability and stability.

	Aaron's inability to spell caused one minor setback when loading the js file on 
	the page silently failed because the file was named differently from what the html was
	searching for. While this was Aaron's fault, the lack of documentation on how to set
	up an HTML file that used both elm.js and other js files didn't help.


Known bugs:
	When a peak is right at the uper or lower edge of play, and is passed twice by the bar,
	it will jump outside the play-field, and if it has not changed to a miss or hit image by
	then will also change to an incorrect color. We think this is related to how the peaks are
	placed by calculating the lines future position based on its current direction, but are
	unsure exactly why this occurs. Since it only occurs after a peak could have been hit
	this bug fortunately does not harm the player's ability to play the game.

	Whenever a peak is hit, there is noticeable lag. This is more of a nuisance than a
	bug, but if we could find a solution it would make play more enjoyable.

	We still are having difficulties with p5 not finding peaks in some stretches
	of music, but unless we are willing to completely re-write the peak
	analyzing functions, there is not much we can do about this.


Future Plans:
	If we were to continue working this project, we would like to implement the following:
	Calibration mode
	Difficulty levels
	GUI for selecting sound files